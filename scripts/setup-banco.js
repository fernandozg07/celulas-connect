const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üóÑÔ∏è Configurando banco de dados real...\n');

// Verificar se .env existe
const envPath = path.join(process.cwd(), '.env');
if (!fs.existsSync(envPath)) {
  console.log('‚ùå Arquivo .env n√£o encontrado!');
  console.log('üìù Crie o arquivo .env com suas credenciais do banco.');
  process.exit(1);
}

// Ler .env
const envContent = fs.readFileSync(envPath, 'utf8');
if (!envContent.includes('postgresql://')) {
  console.log('‚ö†Ô∏è  Configure a DATABASE_URL no arquivo .env');
  console.log('üìñ Consulte o arquivo SETUP-BANCO.md para instru√ß√µes');
  process.exit(1);
}

try {
  console.log('1Ô∏è‚É£ Copiando schema PostgreSQL...');
  const schemaPostgres = path.join(process.cwd(), 'prisma', 'schema-postgresql.prisma');
  const schemaMain = path.join(process.cwd(), 'prisma', 'schema.prisma');
  
  if (fs.existsSync(schemaPostgres)) {
    fs.copyFileSync(schemaPostgres, schemaMain);
    console.log('‚úÖ Schema PostgreSQL configurado');
  }

  console.log('\n2Ô∏è‚É£ Gerando cliente Prisma...');
  execSync('npx prisma generate', { stdio: 'inherit' });

  console.log('\n3Ô∏è‚É£ Aplicando schema no banco...');
  execSync('npx prisma db push', { stdio: 'inherit' });

  console.log('\n4Ô∏è‚É£ Populando com dados iniciais...');
  execSync('npx tsx scripts/seed.ts', { stdio: 'inherit' });

  console.log('\nüéâ Banco configurado com sucesso!');
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('   ‚Ä¢ Execute: npm run dev');
  console.log('   ‚Ä¢ Acesse: http://localhost:3000');
  console.log('   ‚Ä¢ Visualize dados: npx prisma studio');

} catch (error) {
  console.error('\n‚ùå Erro na configura√ß√£o:', error.message);
  console.log('\nüîß Solu√ß√µes:');
  console.log('   ‚Ä¢ Verifique a DATABASE_URL no .env');
  console.log('   ‚Ä¢ Confirme se o banco est√° acess√≠vel');
  console.log('   ‚Ä¢ Consulte SETUP-BANCO.md');
}